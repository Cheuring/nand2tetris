// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int len,maxlen;
    field Array chars;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength=0){
            let maxLength=1;
        }
        let len = 0;
        let maxlen = maxLength;
        let chars = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return ;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return ;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(maxlen > len){
            let chars[len] = c;
            let len = len + 1 ;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(len > 0){
            let len = len -1;
        }
        return ;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value,i,temp;
        var boolean isNeg;
        if(chars[0]=45){
            let i = 1;
            let isNeg = true;
        }else {
            let i=0;
            let isNeg = false;
        }
        let value = 0;
        while(i<len){
            let temp = chars[i];
            if((temp<48)|(temp>57)){
                if(isNeg){
                    return -value;
                }else {
                    return value;
                }
            }
            let value = value*10 + temp - 48;
            let i = i +1;
        }
        if(isNeg){
            return -value;
        }else {
            return value;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;
        if(val < 0){
            let val = -val;
            do appendChar(45);
        }
        do setInt2(val);
        return ;
    }

    method void setInt2(int val){
        var int nestN;
        if(val<10){
            do appendChar(val+48);
        }else{
            let nestN = val/10;
            do setInt2(nestN);
            do appendChar(val+48-(nestN*10));
        }
        return ;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
