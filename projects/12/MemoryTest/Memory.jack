// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array freeList;
    /** Initializes the class. */
    function void init() {
        let ram=0;
        let freeList=2048;
        let freeList[0]=null;
        let freeList[1]=14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address]=value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array temp;
        var int idx,allocsize;
        let temp=freeList;
        let allocsize = size + 2;
        while(~(temp=null)){
            if(temp[1] > allocsize){
                let idx=temp[1]-size-1;
                let temp[idx]=0;
                let temp[idx+1]=size;
                let temp[1]=idx-1;
                return temp+idx+2;
            }else {
                let temp = temp[0] ;
            }
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[-2]=freeList;
        let freeList=o;
        return;
    }    
}
